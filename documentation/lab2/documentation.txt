https://github.com/ComanacDragos/ToyLanguageCompiler

Value
// default implementation: compares lexicographically the string representation of the Value with
// the string representation of the otherValue. If the representations are equal 0 is returned
// If the Value representation is less than otherValue representation a negative scanner.symbolTable.value is returned
// otherwise a positive scanner.symbolTable.value is returned
default Integer compareTo(Value otherValue)

BoolValue, CharValue, FloatValue, IdentifierValue, IntValue, StringValue are implementing Value
and each have a baseValue and their representation according to the specification

scanner.symbolTable.SymbolTableNode has the following attributes
    Integer position; // position in the symbol table
    Value scanner.symbolTable.value; // the scanner.symbolTable.value in the symbol table
    scanner.symbolTable.SymbolTableNode leftChild; // reference to the leftChild
    scanner.symbolTable.SymbolTableNode rightChild; // reference to the rightChild

public interface scanner.symbolTable.SymbolTable {
    /*
    Returns the position of the scanner.symbolTable.value if the scanner.symbolTable.value exists,
     otherwise it inserts the scanner.symbolTable.value and returns the new position
     */
    Integer getPosition(Value scanner.symbolTable.value);
}

public class scanner.symbolTable.SymbolTableBSTImpl implements scanner.symbolTable.SymbolTable and has the following attributes
    int nextPosition = 0; // represents the position of the next scanner.symbolTable.value to be inserted
    scanner.symbolTable.SymbolTableNode root; // represents the root of the tree


scanner.symbolTable.ComposedSymbolTableImpl implements scanner.symbolTable.SymbolTable and has 2 symbol tables
    scanner.symbolTable.SymbolTable identifierSymbolTable; // for identifiers
    scanner.symbolTable.SymbolTable constantSymbolTable; // for constants



